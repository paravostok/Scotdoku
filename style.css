### style.css

```css
/* global page styling */
body {
  font-family: 'Segoe UI', sans-serif;
  background-color: #f4f4f4;
  color: #333;
  margin: 0;
  padding: 0;
}

/* grid container: 4 columns x 4 rows */
.grid-container {
  display: grid;
  grid-template-columns: 120px repeat(3, 1fr);
  grid-template-rows: 60px repeat(3, 1fr);
  gap: 5px;
  margin: 20px auto;
  width: 600px;
  max-width: 95vw;
  background-color: #fff;
  border-radius: 10px;
  box-shadow: 0 0 6px rgba(0,0,0,0.1);
  padding: 10px;
  box-sizing: border-box;
}

/* header/label cells */
/* header/label cells */
.label-cell {
  display: flex;
  align-items: center;
  justify-content: center;
  text-align: center;
  padding: 4px;
  font-size: 1rem;
  font-weight: 600;
  background-color: #eef2f7;
  border: 1px solid #ccc;
  border-radius: 4px;
  overflow-wrap: break-word;
  word-break: break-word;
  white-space: normal;
  max-width: 120px;
  max-height: 80px;
  height: auto;
  box-sizing: border-box;
}
.label-cell.shrink {
  font-size: 0.8rem;
}
.label-cell.shrink {
  font-size: 0.8rem;
}

/* input cells */
.select-cell {
  position: relative;
  background-color: #fefefe;
  border: 1px solid #ccc;
  border-radius: 4px;
  overflow: hidden;
  display: flex;
  align-items: center;
  justify-content: center;
  height: 100px;
  box-sizing: border-box;
}
.select-cell input {
  width: 90%;
  height: 60%;
  border: none;
  font-size: 1.2rem;
  text-align: center;
  background: transparent;
  position: relative;
  z-index: 2;
}
.select-cell.correct {
  outline: 3px solid #28a745;
}
.select-cell.incorrect {
  outline: 3px solid #dc3545;
}
.select-cell.golden-settlement {
  border: 2px solid gold;
}
.select-cell.golden-settlement::before {
  content: "";
  position: absolute;
  top: 0; left: 0;
  width: 100%; height: 100%;
  background-image: url('https://upload.wikimedia.org/wikipedia/commons/1/10/Flag_of_Scotland.svg');
  background-size: cover;
  background-position: center;
  background-repeat: no-repeat;
  opacity: 0.4;
  z-index: 1;
}

/* header & controls */
.header {
  text-align: center;
  margin-top: 20px;
  font-size: 2rem;
  color: #2c3e50;
}
.controls {
  display: flex;
  justify-content: center;
  margin: 15px 0;
  gap: 10px;
}
button {
  padding: 8px 16px;
  font-size: 0.95rem;
  border-radius: 5px;
  border: none;
  background-color: #2c3e50;
  color: white;
  cursor: pointer;
  transition: background-color 0.2s ease;
}
button:hover { background-color: #1a242f; }

/* footer */
.site-footer {
  text-align: center;
  padding: 20px 0;
  color: #666;
  font-size: 0.9rem;
}
.site-footer p { font-style: italic; }
```

---

### scotdoku.js

```js
import settlements from './settlement.js';

document.addEventListener('DOMContentLoaded', () => {
  const container = document.getElementById('scotdoku-container');
  const checkButton = document.getElementById('check-button');
  const newPuzzleButton = document.getElementById('new-puzzle-button');
  const resultMessage = document.getElementById('result-message');
  if (!container || !checkButton || !newPuzzleButton) return;

  let target = null;
  let rowCats = [];
  let colCats = [];

  function shuffle(arr) {
    for (let i = arr.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
  }

  function getAllCategories(s) {
    const cats = [];
    s.tags.forEach(tag => cats.push({ label: tag, fn: x => x.tags.includes(tag) }));
    ['new town','market town','town'].forEach(tag =>
      cats.push({ label: `not ${tag}`, fn: x => !x.tags.includes(tag) })
    );
    [10000, 50000, 100000].forEach(val => {
      cats.push({ label: `population > ${val}`, fn: x => x.population > val });
      cats.push({ label: `population <= ${val}`, fn: x => x.population <= val });
    });
    if (cats.length < 6) cats.push({ label: 'no special designation', fn: _ => true });
    return cats;
  }

  function conflicting(a, b) {
    const pairs = [
      ['population > 10000','population <= 10000'],
      ['population > 50000','population <= 50000'],
      ['population > 100000','population <= 100000'],
      ['town','not town'],['new town','not new town'],['market town','not market town']
    ];
    return pairs.some(([x,y]) =>
      (a.label===x&&b.label===y)||(a.label===y&&b.label===x)
    );
  }

  function getRandomSettlement() {
    return settlements[Math.floor(Math.random() * settlements.length)];
  }

  function buildPuzzle() {
    target = getRandomSettlement();
    const allCats = shuffle(getAllCategories(target));
    const chosen = [];
    allCats.forEach(cat => {
      if (chosen.length < 6 && chosen.every(c => !conflicting(c, cat))) chosen.push(cat);
    });
    while (chosen.length < 6) chosen.push({ label: 'no special designation', fn: _ => true });
    rowCats = chosen.slice(0, 3);
    colCats = chosen.slice(3, 6);

    container.innerHTML = '';
    container.style.gridTemplateRows = `60px repeat(3, 1fr)`;

    // corner
    container.appendChild(labelCell('', 1, 1));

    colCats.forEach((cat, j) => {
      const el = labelCell(cat.label, 1, j + 2);
      if (cat.label.length > 18) el.classList.add('shrink');
      container.appendChild(el);
    });

    rowCats.forEach((cat, i) => {
      const el = labelCell(cat.label, i + 2, 1);
      if (cat.label.length > 18) el.classList.add('shrink');
      container.appendChild(el);
      for (let j = 0; j < 3; j++) {
        const cell = document.createElement('div');
        cell.className = 'select-cell';
        cell.style.gridRow = i + 2;
        cell.style.gridColumn = j + 2;
        const input = document.createElement('input');
        input.type = 'text';
        input.id = `input-${i}-${j}`;
        cell.appendChild(input);
        container.appendChild(cell);
      }
    });

    resultMessage.textContent = '';
  }

  function labelCell(text, r, c) {
    const el = document.createElement('div');
    el.className = 'label-cell';
    el.style.gridRow = r;
    el.style.gridColumn = c;
    el.textContent = text;
    return el;
  }

  checkButton.addEventListener('click', () => {
    let allCorrect = true;
    const used = new Set();
    document.querySelectorAll('.select-cell').forEach(c => c.classList.remove('correct', 'incorrect', 'golden-settlement'));

    for (let i = 0; i < 3; i++) {
      for (let j = 0; j < 3; j++) {
        const input = document.getElementById(`input-${i}-${j}`);
        const cell = input.parentElement;
        const val = input.value.trim().toLowerCase();
        const obj = settlements.find(s => s.name.toLowerCase() === val);
        const unique = val && !used.has(val);
        const ok = obj && unique && rowCats[i].fn(obj) && colCats[j].fn(obj);
        if (ok) used.add(val);

        cell.classList.add(ok ? 'correct' : 'incorrect');
        if (ok && val === target.name.toLowerCase()) {
          cell.classList.add('golden-settlement');
        }
        if (!ok) allCorrect = false;
      }
    }

    resultMessage.textContent = allCorrect ? '✅ All correct!' : '❌ Some incorrect.';
  });

  newPuzzleButton.addEventListener('click', buildPuzzle);
  buildPuzzle();
});
```
    
